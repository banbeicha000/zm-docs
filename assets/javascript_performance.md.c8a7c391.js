import{_ as s,o as a,c as l,X as n}from"./chunks/framework.a911dc49.js";const p="/zm-docs/assets/web_core.3e657d47.webp",u=JSON.parse('{"title":"Web指标","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/performance.md","filePath":"javascript/performance.md","lastUpdated":1724308803000}'),e={name:"javascript/performance.md"},t=n('<h1 id="web指标" tabindex="-1">Web指标 <a class="header-anchor" href="#web指标" aria-label="Permalink to &quot;Web指标&quot;">​</a></h1><p>https://web.dev/i18n/zh/vitals/</p><p>js库 <code>web-vitals</code></p><h1 id="核心-web-指标" tabindex="-1">核心 Web 指标 <a class="header-anchor" href="#核心-web-指标" aria-label="Permalink to &quot;核心 Web 指标&quot;">​</a></h1><p><img src="'+p+`" alt="img.png"></p><ul><li><code>Largest Contentful Paint (LCP)</code> ：最大内容绘制，测量加载性能。为了提供良好的用户体验，LCP 应在页面首次开始加载后的2.5 秒内发生。</li><li><code>First Input Delay (FID)</code> ：首次输入延迟，测量交互性。为了提供良好的用户体验，页面的 FID 应为100 毫秒或更短。</li><li><code>Cumulative Layout Shift (CLS)</code> ：累积布局偏移，测量视觉稳定性。为了提供良好的用户体验，页面的 CLS 应保持在 0.1. 或更少</li></ul><h2 id="在-javascript-中测量-lcp" tabindex="-1">在 JavaScript 中测量 LCP <a class="header-anchor" href="#在-javascript-中测量-lcp" aria-label="Permalink to &quot;在 JavaScript 中测量 LCP&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PerformanceObserver</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">entryList</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entry</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entryList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEntries</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">LCP candidate:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">startTime</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entry</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">largest-contentful-paint</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">buffered</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>每条记录在案的largest-contentful-paint条目代表当前的 LCP 候选对象。通常情况下，最近条目发射的startTime值就是 LCP 值，但情况并非总是如此。并不是所有的largest-contentful-paint条目都能够用来测量 LCP</p></div><p><strong>LCP 主要受四个因素影响：</strong></p><ul><li>缓慢的服务器响应速度</li><li>JavaScript 和 CSS 渲染阻塞</li><li>资源加载时间</li><li>客户端渲染</li></ul><ol><li><h4 id="缓慢的服务器响应速度" tabindex="-1">缓慢的服务器响应速度 <a class="header-anchor" href="#缓慢的服务器响应速度" aria-label="Permalink to &quot;缓慢的服务器响应速度&quot;">​</a></h4></li></ol><p>浏览器从服务器接收内容所需的时间越长，在屏幕上渲染任何内容所需的时间就越长。更快的服务器响应速度能直接改善包括 LCP 在内的各项页面加载指标。使用Time to First Byte 首字节时间 (TTFB) 来测量服务器响应时间。可以通过多种不同的方式来改进 TTFB</p><details><summary>优化服务器</summary><p class="pl-8">是否正在运行需要消耗大量时间和系统资源才能完成的查询？或者服务器端是否有其他复杂的操作会延迟页面内容的返回过程？分析和提高服务器端代码的效率将直接改善浏览器接收数据所需的时间</p></details><details><summary>将用户路由到附近的 CDN</summary><p class="pl-8">内容分发网络 (CDN) 是分布在许多不同位置的服务器网络。可以考虑使用 CDN 来确保用户永远不必为发送到远距离服务器的网络请求而等待</p></details><details><summary>缓存资产</summary><p class="pl-8">如果 HTML 是静态的，且不需要针对每个请求进行更改，那么缓存可以防止网页进行不必要的重建</p></details><details><summary>优先使用缓存提供 HTML 页面</summary><p class="pl-8">安装好的 Service Worker 会在浏览器后台运行，并可以拦截来自服务器的请求。此级别的程序化缓存控制使得缓存部分或全部 HTML 页面内容得以实现，并且只会在内容发生更改时更新缓存</p></details><details><summary>尽早建立第三方连接</summary><p class="pl-8">对第三方域的服务器请求也会影响 LCP，尤其是当浏览器需要这些请求来在页面上显示关键内容的情况下。使用rel=&quot;preconnect&quot;来告知浏览器您的页面打算尽快建立连接.<code>&lt;link rel=&quot;preconnect&quot; href=&quot;https://example.com&quot; /&gt;</code></p><p class="pl-8">还可以使用dns-prefetch来更快地完成 DNS 查找<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://example.com&quot; /&gt;</code></p></details><details><summary>使用签名交换（SXG）</summary><p class="pl-8">签名交换 (SXG) 是一种交付机制，通过提供采用了易于缓存格式的内容来实现更快的用户体验</p></details><ol start="2"><li><h4 id="阻塞渲染的-javascript-和-css" tabindex="-1">阻塞渲染的 JavaScript 和 CSS <a class="header-anchor" href="#阻塞渲染的-javascript-和-css" aria-label="Permalink to &quot;阻塞渲染的 JavaScript 和 CSS&quot;">​</a></h4></li></ol><p>浏览器在能够渲染任何内容之前，需要将 HTML 标记解析为 DOM 树。如果 HTML 解析器遇到任何外部样式表（&lt;link rel=&quot;stylesheet&quot;&gt;）或同步 JavaScript 标签（&lt;script src=&quot;main.js&quot;&gt;），则会暂停解析</p><p>脚本和样式表都是阻塞渲染的资源，这些资源会使 FCP 延迟，进而导致 LCP 延迟。延迟加载任何非关键的 JavaScript 和 CSS，从而提高网页主要内容的加载速度</p><details><summary>减少 CSS 阻塞时间 </summary><details class="ml-8"><summary>削减 CSS</summary><p class="pl-8">CSS 文件可以包含空格、缩进或注释等字符。这些对于浏览器来说不是必要的，删除这些可以减少阻塞渲染的 CSS 数量</p></details><details class="ml-8"><summary>延迟加载非关键 CSS</summary><p class="pl-8">使用 Chrome 开发者工具中的 Coverage(代码覆盖率) 选项卡查找网页上任何未使用的 CSS</p><p class="pl-8">如果是网站的单独页面上使用，可以将所有未使用的 CSS 完全删除或移动到另一个样式表</p><p class="pl-8">对于任何初始渲染时不需要的 CSS，请使用 loadCSS 来异步加载文件，这里运用了rel=&quot;preload&quot;和onload</p><p class="pl-8">&lt;link rel=&quot;preload&quot; href=&quot;stylesheet.css&quot; as=&quot;style&quot; onload=&quot;this.rel=&#39;stylesheet&#39;&quot;&gt;</p></details><details class="ml-8"><summary>内联关键 CSS</summary><p class="pl-8">通过把用于首屏内容的任何关键路径 CSS 直接包括在&lt;head&gt;中来将这些 CSS 进行内联</p><p class="pl-8">将重要样式进行内联后，就不再需要通过往返请求来获取关键 CSS。延迟加载其余部分可以最大限度地减少 CSS 阻塞时间</p></details></details><details><summary>减少 JavaScript 阻塞时间</summary><p class="pl-8"><a href="https://web.dev/reduce-network-payloads-using-text-compression/" target="_blank">削减和压缩 JavaScript 文件</a></p><p class="pl-8"><a href="https://web.dev/reduce-javascript-payloads-with-code-splitting/" target="_blank">延迟加载未使用的 JavaScript</a></p><p class="pl-8"><a href="https://web.dev/serve-modern-code-to-modern-browsers/" target="_blank">最大限度减少未使用的 polyfill</a></p></details><ol start="3"><li><h4 id="加载许多其他类型资源所需的时间也会影响绘制时间。影响-lcp-的元素类型为" tabindex="-1">加载许多其他类型资源所需的时间也会影响绘制时间。影响 LCP 的元素类型为 <a class="header-anchor" href="#加载许多其他类型资源所需的时间也会影响绘制时间。影响-lcp-的元素类型为" aria-label="Permalink to &quot;加载许多其他类型资源所需的时间也会影响绘制时间。影响 LCP 的元素类型为&quot;">​</a></h4></li></ol><ul><li>&lt;img&gt;元素</li><li>内嵌在&lt;svg&gt;元素内的&lt;image&gt;元素</li><li>&lt;video&gt;元素（使用封面图像测量 LCP）</li><li>通过url()函数（而非使用 CSS 渐变）加载的带有背景图像的元素</li><li>包含文本节点或其他行内级文本元素的块级元素</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>如果在首屏渲染，加载这些元素所需的时间将对 LCP 产生直接影响。有几种方法可以确保尽快加载这些文件</p></div><ul><li>优化和压缩图像</li><li>预加载重要资源</li><li>压缩文本文件</li><li>基于网络连接交付不同资产（自适应服务）</li><li>使用 Service Worker 缓存资产</li></ul><p>continue <a href="https://web.dev/optimize-lcp/#slow-servers" target="_blank" rel="noreferrer">https://web.dev/optimize-lcp/#slow-servers</a></p><h2 id="其他能够改进-lcp-的单个性能技巧-请参阅" tabindex="-1">其他能够改进 LCP 的单个性能技巧，请参阅： <a class="header-anchor" href="#其他能够改进-lcp-的单个性能技巧-请参阅" aria-label="Permalink to &quot;其他能够改进 LCP 的单个性能技巧，请参阅：&quot;">​</a></h2><ul><li><a href="https://web.dev/apply-instant-loading-with-prpl/" target="_blank">使用 PRPL 模式做到即时加载</a></li><li><a href="https://www.udacity.com/course/front-end-web-developer-nanodegree--nd0011" target="_blank">优化关键渲染路径</a></li><li><a href="https://web.dev/fast/#optimize-your-css" target="_blank">优化您的 CSS</a></li><li><a href="https://web.dev/fast/#optimize-your-images" target="_blank">优化您的图像</a></li><li><a href="https://web.dev/fast/#optimize-web-fonts" target="_blank">优化网页字体</a></li><li><a href="https://web.dev/fast/#optimize-your-javascript" target="_blank">优化您的 JavaScript（针对客户端渲染的网站）</a></li></ul><ul><li>如果最大元素并非最重要元素该怎么办? 使用元素计时 API</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Element Timing API </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">elementtiming</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hero-image</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">elementtiming</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">important-paragraph</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This is text I care about.</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Catch errors since some browsers throw when using the new \`type\` option.</span></span>
<span class="line"><span style="color:#A6ACCD;">    // https://bugs.webkit.org/show_bug.cgi?id=209216</span></span>
<span class="line"><span style="color:#A6ACCD;">    try </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Create the performance observer.</span></span>
<span class="line"><span style="color:#A6ACCD;">    const po </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PerformanceObserver</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">entryList</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entry</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entryList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEntries</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Log the entry and all associated details.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toJSON</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Start listening for \`element\` entries to be dispatched.</span></span>
<span class="line"><span style="color:#A6ACCD;">    po</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">element</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">buffered</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> catch (e) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Do nothing if the browser doesn&#39;t support this API.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,33),o=[t];function r(c,i,y,F,D,C){return a(),l("div",null,o)}const m=s(e,[["render",r]]);export{u as __pageData,m as default};
